#
# This file was automatically generated by GenerateAST.py on 17/05/2023 at 19:48:56
#

from __future__ import annotations
from dataclasses import dataclass
from AST.Expr import Expr
from Token import Token
         

#
# Interfaces
#

class Stmt:
    def accept(self, visitor: StmtVisitor):
        raise NotImplementedError("Tried calling a virtual method")


#
# Concrete visitors
#
class StmtVisitor:
    def visit_block_stmt(self, stmt: BlockStmt):
        raise NotImplementedError("Tried calling a virtual method visit_block_stmt")

    def visit_expression_stmt(self, stmt: ExpressionStmt):
        raise NotImplementedError("Tried calling a virtual method visit_expression_stmt")

    def visit_print_stmt(self, stmt: PrintStmt):
        raise NotImplementedError("Tried calling a virtual method visit_print_stmt")

    def visit_variable_stmt(self, stmt: VariableStmt):
        raise NotImplementedError("Tried calling a virtual method visit_variable_stmt")


#
# Concrete elements
#

@dataclass
class BlockStmt(Stmt):
    statements: list[Stmt]

    def accept(self, visitor: StmtVisitor):
        return visitor.visit_block_stmt(self)


@dataclass
class ExpressionStmt(Stmt):
    expression: Expr

    def accept(self, visitor: StmtVisitor):
        return visitor.visit_expression_stmt(self)


@dataclass
class PrintStmt(Stmt):
    expression: Expr

    def accept(self, visitor: StmtVisitor):
        return visitor.visit_print_stmt(self)


@dataclass
class VariableStmt(Stmt):
    name: Token
    initializer: Expr

    def accept(self, visitor: StmtVisitor):
        return visitor.visit_variable_stmt(self)
