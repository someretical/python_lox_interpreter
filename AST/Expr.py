#
# This file was automatically generated by GenerateAST.py on 04/02/2023 at 16:05:46
#

from __future__ import annotations
from dataclasses import dataclass
from Token import Token, LiteralType


class Expr:
    def accept(self, visitor: ExprVisitor):
        raise NotImplementedError("Tried calling a virtual method")


class ExprVisitor:
    def visit_binary(self, expr: Binary):
        raise NotImplementedError("Tried calling a virtual method")

    def visit_grouping(self, expr: Grouping):
        raise NotImplementedError("Tried calling a virtual method")

    def visit_literal(self, expr: Literal):
        raise NotImplementedError("Tried calling a virtual method")

    def visit_unary(self, expr: Unary):
        raise NotImplementedError("Tried calling a virtual method")




@dataclass
class Binary(Expr):
    left: Expr
    operator: Token
    right: Expr

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_binary(self)


@dataclass
class Grouping(Expr):
    expression: Expr

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_grouping(self)


@dataclass
class Literal(Expr):
    value: LiteralType

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_literal(self)


@dataclass
class Unary(Expr):
    operator: Token
    right: Expr

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_unary(self)
