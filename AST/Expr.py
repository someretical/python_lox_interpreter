#
# This file was automatically generated by GenerateAST.py on 17/05/2023 at 19:48:56
#

from __future__ import annotations
from dataclasses import dataclass
from Token import Token, LiteralType
         

#
# Interfaces
#

class Expr:
    def accept(self, visitor: ExprVisitor):
        raise NotImplementedError("Tried calling a virtual method")


#
# Concrete visitors
#
class ExprVisitor:
    def visit_assign_expr(self, expr: AssignExpr):
        raise NotImplementedError("Tried calling a virtual method visit_assign_expr")

    def visit_binary_expr(self, expr: BinaryExpr):
        raise NotImplementedError("Tried calling a virtual method visit_binary_expr")

    def visit_grouping_expr(self, expr: GroupingExpr):
        raise NotImplementedError("Tried calling a virtual method visit_grouping_expr")

    def visit_literal_expr(self, expr: LiteralExpr):
        raise NotImplementedError("Tried calling a virtual method visit_literal_expr")

    def visit_unary_expr(self, expr: UnaryExpr):
        raise NotImplementedError("Tried calling a virtual method visit_unary_expr")

    def visit_variable_expr(self, expr: VariableExpr):
        raise NotImplementedError("Tried calling a virtual method visit_variable_expr")


#
# Concrete elements
#

@dataclass
class AssignExpr(Expr):
    name: Token
    value: Expr

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_assign_expr(self)


@dataclass
class BinaryExpr(Expr):
    left: Expr
    operator: Token
    right: Expr

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_binary_expr(self)


@dataclass
class GroupingExpr(Expr):
    expression: Expr

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_grouping_expr(self)


@dataclass
class LiteralExpr(Expr):
    value: LiteralType

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_literal_expr(self)


@dataclass
class UnaryExpr(Expr):
    operator: Token
    right: Expr

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_unary_expr(self)


@dataclass
class VariableExpr(Expr):
    name: Token

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_variable_expr(self)
